import ast
import os

from src.colors import RED, YELLOW, GREEN, RESET_COLOR

# --- Komplexitäts-Analyse (wie zuvor) ---
class ComplexityVisitor(ast.NodeVisitor):
    def __init__(self):
        self.complexities = {}
        self.current_function = None
        
    def visit_FunctionDef(self, node):
        self.current_function = node.name
        self.complexities[node.name] = {
            'complexity': 1,
            'start_line': node.lineno,
            'end_line': node.end_lineno
        }
        self.generic_visit(node)
        self.current_function = None

    def visit_If(self, node):
        if self.current_function:
            self.complexities[self.current_function]['complexity'] += 1
        self.generic_visit(node)
        
    def visit_For(self, node):
        if self.current_function:
            self.complexities[self.current_function]['complexity'] += 1
        self.generic_visit(node)

# ... Weitere Methoden für while, except etc.

def analyze_file_complexity(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        code_string = f.read()
    
    try:
        tree = ast.parse(code_string)
        visitor = ComplexityVisitor()
        visitor.visit(tree)
        return visitor.complexities
    except SyntaxError:
        return {"error": "Invalid Python code"}

# --- Visualisierung als Heatmap ---
def print_code_heatmap(file_path, complexities, pok: bool = False):
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        
    # Finden der maximalen Komplexität für die Farbskala
    max_complexity = max(c['complexity'] for c in complexities.values()) if complexities else 1

    for line_num, line_content in enumerate(lines, 1):
        color = RESET_COLOR
        for func_name, data in complexities.items():
            if data['start_line'] <= line_num <= data['end_line']:
                # Farbauswahl basierend auf Komplexität im Verhältnis zum Maximum
                if data['complexity'] > max_complexity:
                    print(f"{RED}{line_num:4d} |{line_content.rstrip()}{RESET_COLOR}")
                elif data['complexity'] > max_complexity * 0.75:
                    print(f"{YELLOW}{line_num:4d} |{line_content.rstrip()}{RESET_COLOR}")
                else:
                    if pok:
                        print(f"{GREEN}{line_num:4d} |{line_content.rstrip()}{RESET_COLOR}")
                break

# --- Beispiel-Anwendung ---
if __name__ == "__main__":
    file_to_analyze = __file__  # Analysiere dieses Skript selbst
    
    complexity_data = analyze_file_complexity(file_to_analyze)

    if "error" in complexity_data:
        print(f"ParseError: {complexity_data['error']}")
    else:
        print_code_heatmap(file_to_analyze, complexity_data)